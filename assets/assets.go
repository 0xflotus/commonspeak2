// Code generated by go-bindata. DO NOT EDIT. @generated
// sources:
// sql/github/words-with-ext.sql
// sql/hackernews/subdomains.sql
// sql/http-archive/subdomains.sql
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sqlGithubWordsWithExtSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xce\xcd\x4e\x84\x30\x14\x40\xe1\xfd\x7d\x8a\xbb\x30\x19\x30\xce\xbc\x80\x2b\x2d\x57\x24\x01\x4a\x0a\x44\x5d\xf1\x67\x85\x26\x08\x48\xdb\x44\xd3\xf4\xdd\x8d\x38\xcb\xb3\x3a\x5f\x49\x29\xb1\x0a\x10\xb7\xce\x4c\x77\x80\xc8\x78\x9d\x57\xc1\x6d\x88\xc3\x6a\x17\x03\x4f\x82\x67\x80\xd8\xf6\x6a\xfc\xb2\x72\xff\x39\x6f\xb6\x9f\xd5\x70\x7e\xef\x4c\x77\x19\x95\x99\x6c\xdf\xec\x72\x5b\xf5\xe5\x43\xcd\x52\xb7\xf0\xf2\x4c\x82\x00\x51\x50\x4c\xaf\x45\xc3\x78\x5e\x3d\x24\x79\x89\xc1\x31\xc0\xfd\x14\x38\x27\xbf\x8d\x5c\xb4\x5a\x17\xed\x7d\x78\x73\x0a\x21\x16\xbc\x2e\xf0\xf1\xed\xea\x00\x2e\x22\x12\xff\x7d\x30\x30\xa2\x92\x41\x9a\x64\xc9\x1f\xd5\xb9\x59\x7d\x2a\xe3\xfd\xfd\x6f\x00\x00\x00\xff\xff\xdb\xe0\xde\xd1\xbe\x00\x00\x00")

func sqlGithubWordsWithExtSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlGithubWordsWithExtSql,
		"sql/github/words-with-ext.sql",
	)
}

func sqlGithubWordsWithExtSql() (*asset, error) {
	bytes, err := sqlGithubWordsWithExtSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/github/words-with-ext.sql", size: 190, mode: os.FileMode(420), modTime: time.Unix(1532021038, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlHackernewsSubdomainsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\x4f\x8f\x9b\x30\x14\xc4\xef\xef\x53\x8c\x38\xc5\x52\x43\xee\x45\x3d\xb0\xac\x17\x21\x25\x10\x19\x38\xe4\xd4\x35\x84\x64\xbd\x0b\x66\xeb\x3f\xea\x46\x51\xbe\x7b\x15\x42\x53\xa5\x07\x4b\xf6\xf3\xcc\xbc\xdf\x24\x82\xc7\x15\x47\xc5\x37\xdb\x42\xc4\x62\x87\x97\x3a\x4f\xaa\xac\xc8\x71\xec\x5c\xe9\x9b\xfd\x38\x48\xa5\x17\x5f\x28\x2b\x91\xe5\x29\x03\x48\xf0\xaa\x16\x79\x39\x4f\x00\x02\xd6\x71\x9e\xd6\x71\xca\xf1\x6e\x11\x97\x08\x82\x80\x80\x83\xd7\xad\x53\xa3\x7e\x4c\xb2\x0c\x67\x02\x00\x67\x4e\xf3\x0d\x30\x9d\xf3\x46\xa3\x16\xd9\xc2\xb2\xd0\xde\xc5\x2c\x9a\x04\x17\xb4\xd2\xb5\x6f\x58\x74\x5f\xec\x7f\x8f\x9d\x25\x74\x3b\xf3\xf4\x11\x9e\x45\x74\x45\x2a\xb6\xd7\x62\x25\x16\x13\x73\xaf\x1a\x23\xcd\xe9\x47\x70\xb4\xdf\x57\xab\x76\x1c\x86\x51\xdb\xcf\x4e\x7e\x2c\xfd\xfe\xb0\xaa\x45\x16\x0e\x4a\x87\xef\x36\x20\x16\x11\x95\x7c\xcd\x93\x6a\x32\x3e\x64\x7b\xd3\xb3\x6b\xe5\x3b\xf3\x37\x02\xda\xd1\x6b\x77\xfb\x92\xf6\xf6\xa2\x17\x51\x6c\x26\xfb\x6b\xa3\x8e\xbf\x7c\x67\x4e\xcb\x4f\xdf\xf4\xaa\x5d\xee\xa5\x93\xe1\x9b\x6c\x3f\x3a\xf3\x53\x77\xbf\x6d\x78\xf0\x7d\xff\x4a\xa9\x28\xea\x2d\x9e\x76\x84\x7f\xe1\x54\x88\x67\x2e\xf0\xb4\xc3\xdf\x2d\x78\xe6\x65\x42\xeb\x6c\x93\x55\x04\x9c\xcf\xbd\x1a\x94\xbb\x5c\xa2\x3f\x01\x00\x00\xff\xff\x59\xeb\x00\xbf\xd8\x01\x00\x00")

func sqlHackernewsSubdomainsSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlHackernewsSubdomainsSql,
		"sql/hackernews/subdomains.sql",
	)
}

func sqlHackernewsSubdomainsSql() (*asset, error) {
	bytes, err := sqlHackernewsSubdomainsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/hackernews/subdomains.sql", size: 472, mode: os.FileMode(420), modTime: time.Unix(1534034400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlHttpArchiveSubdomainsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\x41\x8f\xba\x30\x14\xc4\xef\xef\x53\x4c\x38\xd1\x7f\xfe\x8b\xf7\x25\x7b\x60\xb1\x12\x12\x05\x53\xe0\xe0\x4d\x44\xd4\xba\x52\x4c\x5b\x36\x1a\xe3\x77\xdf\xa0\xc4\x5d\x3d\x34\x69\xe6\xcd\x9b\xfc\xe6\x85\x82\x07\x39\x47\xce\x67\xf3\x54\x04\x62\x81\x49\x91\x84\x79\x9c\x26\x04\x6c\x6b\x9b\x75\xab\x75\xdb\x94\x52\xb9\x27\x64\xb9\x88\x93\x88\x11\x20\x78\x5e\x88\x24\x1b\x14\x02\xa6\x41\x12\x15\x41\xc4\xb1\x37\x08\x32\x38\x8e\x43\xc0\xa6\x53\x95\x95\xad\x7a\xce\x31\x0c\x17\x02\x00\xab\xcf\xc3\x0f\xd0\xb5\xed\xb4\x42\x21\x62\xd7\x30\xcf\x3c\xcc\xcc\xbf\x19\xae\xa8\x4a\x5b\xed\xe0\xd6\x27\xf6\xba\x63\x06\x0b\xdd\xdf\xa0\x3e\xa3\x33\x9f\x7a\xa4\x74\xde\x17\xcb\x08\x70\x71\x90\x2b\x5d\xea\xf3\x87\xb3\x35\xef\xa3\x51\xd5\x36\x4d\xab\xcc\xb1\x2e\xbf\xde\xba\xf5\x66\x54\x88\xd8\x6b\xa4\xf2\xf6\xc6\x01\xf3\x29\xe3\x53\x1e\xe6\xaf\x17\x69\xb5\xdc\x4a\xc5\xfa\xc2\x0f\xe2\xff\x04\x84\x69\x91\xe4\x7f\xa7\x55\xdb\x29\x4b\x13\x91\xce\x08\x58\xee\xac\x3d\x96\xba\xda\xc9\xef\xda\xeb\xf4\xc1\x78\xff\x96\x14\x89\xb4\x98\xe3\x73\x41\xf8\x8d\xa2\x54\x8c\xb9\xb8\x8b\xb7\x04\x8c\x79\x16\xd2\x34\x9e\xc5\x3d\xca\xe5\x72\x90\x8d\xb4\xd7\xab\xff\x13\x00\x00\xff\xff\xb7\x79\xe1\x98\xc3\x01\x00\x00")

func sqlHttpArchiveSubdomainsSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlHttpArchiveSubdomainsSql,
		"sql/http-archive/subdomains.sql",
	)
}

func sqlHttpArchiveSubdomainsSql() (*asset, error) {
	bytes, err := sqlHttpArchiveSubdomainsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/http-archive/subdomains.sql", size: 451, mode: os.FileMode(420), modTime: time.Unix(1534034404, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sql/github/words-with-ext.sql": sqlGithubWordsWithExtSql,
	"sql/hackernews/subdomains.sql": sqlHackernewsSubdomainsSql,
	"sql/http-archive/subdomains.sql": sqlHttpArchiveSubdomainsSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"sql": &bintree{nil, map[string]*bintree{
		"github": &bintree{nil, map[string]*bintree{
			"words-with-ext.sql": &bintree{sqlGithubWordsWithExtSql, map[string]*bintree{}},
		}},
		"hackernews": &bintree{nil, map[string]*bintree{
			"subdomains.sql": &bintree{sqlHackernewsSubdomainsSql, map[string]*bintree{}},
		}},
		"http-archive": &bintree{nil, map[string]*bintree{
			"subdomains.sql": &bintree{sqlHttpArchiveSubdomainsSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

